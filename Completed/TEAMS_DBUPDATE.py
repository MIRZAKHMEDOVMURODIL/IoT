{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "import os\n",
    "import json\n",
    "import datetime as dt \n",
    "from os.path import join\n",
    "from logging.handlers import RotatingFileHandler\n",
    "import pandas as pd\n",
    "import psycopg2\n",
    "import pandas as pd\n",
    "from datetime import datetime, timedelta\n",
    "import requests\n",
    "import time\n",
    "import ibm_db\n",
    "\n",
    "#1\n",
    "json_path = r'C:\\Users\\Ayabe3ad\\Desktop\\Teams\\config.json'\n",
    "teams_webhook_url = \"https://kyoceragp.webhook.office.com/webhookb2/32c8e9d8-fee1-47b5-8f88-7c024b169401@82cc187e-25d5-45e4-8c34-8434bf6075fe/IncomingWebhook/c008d92acff64b93a35fa912edecdbf3/329f5970-aad5-4b39-90b5-cf6569c670e1\"             \n",
    "teams_webhook_urll  = \"https://kyoceragp.webhook.office.com/webhookb2/32c8e9d8-fee1-47b5-8f88-7c024b169401@82cc187e-25d5-45e4-8c34-8434bf6075fe/IncomingWebhook/7aae0d10bdf2479da78472f52f6b1ebd/329f5970-aad5-4b39-90b5-cf6569c670e1\"\n",
    "\n",
    "try:\n",
    "   \n",
    "    with open(json_path) as json_file:\n",
    "        config = json.load(json_file)\n",
    "\n",
    "    # Extract Configuration values\n",
    "    database_1 = config['database_1']\n",
    "    host_1 = config['host_1']\n",
    "    port_1 = config['port_1']\n",
    "    protocol_1 = config['protocol_1']\n",
    "    user_1 = config['user_1']\n",
    "    password_1 = config['password_1']\n",
    "    \n",
    "    database_2 = config['database_2']\n",
    "    host_2 = config['host_2']\n",
    "    port_2 = config['port_2']\n",
    "    protocol_2 = config['protocol_2']\n",
    "    user_2 = config['user_2']\n",
    "    password_2 = config['password_2']\n",
    "\n",
    "    log = config['log']  \n",
    "    days = int(config['days'])\n",
    "    insertion_time = str(config['insertion_time'])\n",
    "    inserted_time = dt.datetime.strptime(insertion_time, '%Y-%m-%d %H:%M:%S')\n",
    "    inserted_day = inserted_time.strftime('%Y%m%d')\n",
    "\n",
    "    # Logging Settings    \n",
    "    if not os.path.exists(log):\n",
    "        os.makedirs(log, exist_ok=True)\n",
    "        \n",
    "    dt_st = datetime.now()\n",
    "    log_path = join(log, f\"debug_{dt_st.strftime('%Y%m%d')}.log\")\n",
    "    log_formatter = logging.Formatter('%(asctime)s [%(levelname)s]: %(message)s', datefmt='%Y-%m-%d %H:%M:%S')\n",
    "    log_handler = RotatingFileHandler(filename=log_path, maxBytes=1048576, backupCount=10, delay=True)\n",
    "    log_handler.setFormatter(log_formatter)\n",
    "    logger = logging.getLogger()\n",
    "    logger.setLevel(logging.INFO)\n",
    "    logger.addHandler(log_handler)\n",
    "\n",
    "    print(\"Started\")\n",
    "    logging.info(\"Started\")\n",
    "  \n",
    "    logging.info(\"Step_1: Extract JSON Configuration Values\")\n",
    "    print(\"Step_1: Extract JSON Configuration Values\")\n",
    "\n",
    "except Exception as e:\n",
    "    logging.error(f\"Step_1: An error occurred while loading configuration: {e}\")\n",
    "    print(f\"Step_1: An error occurred while loading configuration: {e}\")\n",
    "\n",
    "#2\n",
    "def take_data_from_database():  \n",
    "    try:\n",
    "        conn = psycopg2.connect(database=database_1, user=user_1, password=password_1, host=host_1, port=port_1)\n",
    "        sql_query = \"\"\"\n",
    "                    SELECT *\n",
    "                    FROM mm_01\n",
    "                    WHERE state IN (2, 3) AND timedate > %s;\n",
    "                \"\"\"\n",
    "        df = pd.read_sql_query(sql_query, conn, params=(inserted_time,))\n",
    "\n",
    "        logging.info(\"Step_2: Data is taken from the Database.\")\n",
    "        print(\"Step_2: Data is taken from the Database.\")\n",
    "\n",
    "        return df\n",
    "    \n",
    "    except Exception as e:\n",
    "        logging.error(f\"Step_2: Error: {e}\")\n",
    "        print(f\"Step_2: Error : {e}\")\n",
    "#3 \n",
    "def insert_into_database(df):\n",
    "    try:\n",
    "        dsn = f\"DATABASE={database_2};HOSTNAME={host_2};PORT={port_2};PROTOCOL={protocol_2};UID={user_2};PWD={password_2}\"\n",
    "        conn = ibm_db.connect(dsn, \"\", \"\")\n",
    "        if conn:\n",
    "            logging.info(\"Step_3: 1.Connected to Database\")\n",
    "            print(\"Step_3: 1.Connected to Database\")\n",
    "    except Exception as e:\n",
    "        print(\"Step_3: 1.Failed to Connect to Database:\", e)\n",
    "        logging.error(\"Step_3: 1.Failed to Connect to Database:\", e)\n",
    "\n",
    "\n",
    "    values = ''\n",
    "    for index, row in df.iterrows():\n",
    "        value_1 = 'Particles'\n",
    "        value_2 = 'MM_01'\n",
    "        value_3 = row['timedate']\n",
    "        value_4 = row['state']\n",
    "        value_5 = '0.5, 1.0, 5.0, 10.0'\n",
    "        value_6 = f\"{row['0.5']}, {row['1.0']}, {row['5.0']}, {row['10.0']}\"\n",
    "\n",
    "        values += f\"('{value_1}','{value_2}', '{value_3}', '{value_4}', '{value_5}', '{value_6}'),\"\n",
    "        \n",
    "    values = values[:-1] \n",
    "\n",
    "    insert_query = f\"INSERT INTO IOT_DATA.THRESHOLD_ALERT(CATEGORY, EQP, TS_DT, STATE, DATA_COLUMN, DATA_VALUE) VALUES {values};\"\n",
    "    stmt = ibm_db.prepare(conn, insert_query)\n",
    "\n",
    "    try:\n",
    "        if ibm_db.execute(stmt):\n",
    "            logging.info(\"Step_3: 2.Inserted to Database\")\n",
    "            print(\"Step_3: 2.Inserted to Database\")\n",
    "\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Step_3: 2.An error occurred while inserting into the database\")\n",
    "        print(f\"Step_3: 2.Error: {e}\")\n",
    "#4\n",
    "def send_teams_message(df):\n",
    "    message_text = \"\"\n",
    "    df['state'] = df['state'].replace({2: '警報', 3: '警告'})\n",
    "    \n",
    "    for index, row in df.iterrows():\n",
    "           value_0 = row['timedate']\n",
    "           value_1 = row['state']  \n",
    "           value_2 = '気中パーティクル'\n",
    "           value_3 = 'mm_01'\n",
    "\n",
    "           value_4 = row['0.5']\n",
    "           value_5 = row['1.0']  \n",
    "           value_6 = row['5.0'] \n",
    "           value_7 = row['10.0']\n",
    "                \n",
    "           link = \"http://mb.in.kyocera.co.jp/motionboard/main?mbid=fidkma77jxaifa65c65aaahv5mwqy\"\n",
    "\n",
    "           message_text += f\"超過アラート   : {value_0}\\n\\n判定: {value_1}\\n\\n種別: {value_2}\\n\\n装置: {value_3}\\n\\nデータ:\\n\\n\\t 0.5  = {value_4}\\n\\t 1.0  = {value_5}\\n\\t 5.0  = {value_6}\\n\\t 10.0 = {value_7}\\nしきい値: \\n\\n↓MotionBoardへのリンク\\n\\n{link}\\n\\n----------------------------\\n\\n\"\n",
    "\n",
    "    payload = {\"text\": message_text}\n",
    "\n",
    "    response = requests.post(teams_webhook_url, data=json.dumps(payload), verify=False)\n",
    "\n",
    "    if response.status_code == 200:\n",
    "        logging.info(\"Step_4: Message sent successfully to Microsoft Teams\")\n",
    "        print(\"Step_4: Message sent successfully to Microsoft Teams\")      \n",
    "    else:\n",
    "        logging.info(f\"Step_4: Failed to send message. Status code: {response.status_code}, Response: {response.text}\")\n",
    "        print(f\"Step_4: Failed to send message. Status code: {response.status_code}, Response: {response.text}\")\n",
    "\n",
    "#5\n",
    "def update_json(df):\n",
    "    try:\n",
    "        if df is not None and not df.empty:\n",
    "            config['insertion_time'] = str(df['timedate'].max())\n",
    "            time=config['insertion_time']\n",
    "            json_data = json.dumps(config, indent=2)\n",
    "\n",
    "            with open(json_path, 'w') as output_file:\n",
    "                output_file.write(json_data)\n",
    "\n",
    "            logging.info(f\"Step_5: JSON Insertion Time is updated to {time}\")\n",
    "            print(f\"Step_5: JSON Insertion Time is updated to  {time}\")\n",
    "\n",
    "        else:\n",
    "            logging.info(f\"Step_5: There is no time data\")\n",
    "            print(f\"Step_5: There is no time data\")\n",
    "            \n",
    "\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Step_5: Error: {e}\")\n",
    "        print(f\"Step_5: Error : {e}\")\n",
    "\n",
    "#6 Delete Log files if created day period passed 30 days                          \n",
    "def delete_old_logs(log, days):\n",
    "    period_time = datetime.now() - timedelta(days=days)\n",
    "\n",
    "    for filename in os.listdir(log):\n",
    "        if filename.endswith(\".log\"):\n",
    "            filepath = os.path.join(log, filename)\n",
    "            try:\n",
    "                if os.path.isfile(filepath) and datetime.fromtimestamp(os.path.getctime(filepath)) < period_time:\n",
    "                    os.remove(filepath)\n",
    "                    logging.info(f\"Deleted log file: {filepath}\")\n",
    "                    print(f\"Deleted log file: {filepath}\")\n",
    "            except Exception as e:\n",
    "                print(f\"Error deleting file {filepath}: {e}\")\n",
    "                logging.info(f\"Error deleting file {filepath}: {e}\")\n",
    "\n",
    "start_time = time.time()\n",
    "\n",
    "df = take_data_from_database() \n",
    "insert_into_database(df)\n",
    "send_teams_message(df)\n",
    "update_json(df)\n",
    "delete_old_logs(log, days)\n",
    "end_time = time.time()\n",
    "\n",
    "logging.info(df)\n",
    "\n",
    "total_time = end_time - start_time\n",
    "print(\"Finished. Total spent time: \", total_time)\n",
    "logging.info(\"Finished. Total spent time: %s\\n\", total_time)\n",
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
